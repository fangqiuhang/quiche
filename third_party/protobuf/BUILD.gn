# Copyright 2014 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Includes default args like 'enable_js_protobuf'.
import("proto_library.gni")
import("proto_sources.gni")
if (enable_js_protobuf) {
  import("//third_party/closure_compiler/compile_js.gni")
}

config("protobuf_config") {
  include_dirs = [
    "src",
    "src/src",
    "src/upb/cmake",
    "src/third_party/utf8_range/",
    "//",
  ]
  defines = [
    #"GOOGLE_PROTOBUF_NO_RTTI",
    #"GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
    #"GOOGLE_PROTOBUF_INTERNAL_DONATE_STEAL_INLINE=0",
  ]
  if (!is_win) {
    defines += [ "HAVE_PTHREAD" ]
  }
}

config("protobuf_warnings") {
  cflags = []
  if (is_clang) {
    # protobuf-3 contains a few functions that are unused.
    cflags += [ "-Wno-unused-function" ]
  }
}

config("protoc_warnings") {
  cflags = []
  if (is_clang) {
    # Some generates contain a few fields that are not used.
    cflags += [ "-Wno-unused-private-field" ]
  }
}

if (is_component_build) {
  config("protobuf_use_dlls") {
    defines = [ "PROTOBUF_USE_DLLS" ]
  }
}

# This config should be applied to targets using generated code from the proto
# compiler. It sets up the include directories properly.
config("using_proto") {
  include_dirs = [
    "src",
    "src/src",
  ]
}

config("allow_deprecated_proto_fields") {
  if (is_clang) {
    cflags = [ "-DPROTOBUF_ALLOW_DEPRECATED=1" ]
  }
}

protobuf_lite_cflags = []
if (is_win) {
  protobuf_lite_cflags = [
    "/wd4018",  # signed/unsigned mismatch in comparison
    "/wd4065",  # switch statement contains 'default' but no 'case' labels
    "/wd4146",  # unary minus operator applied to unsigned type
    "/wd4244",  # implicit conversion, possible loss of data
    "/wd4267",  # size_t to int truncation
    "/wd4291",  # no matching operator delete for a placement new.
    "/wd4305",  # double to float truncation
    "/wd4355",  # 'this' used in base member initializer list
    "/wd4506",  # no definition for inline function (protobuf issue #240)
    "/wd4715",  # not all control paths return a value (fixed in trunk)
  ]
}

static_library("protobuf_lite") {
  sources = protobuf_lite_sources + protobuf_headers

  sources +=
      protobuf_compiler_java_lite_sources + protobuf_compiler_java_lite_headers

  deps = [ "//third_party/abseil-cpp:absl" ]
  public_deps = [ "//third_party/abseil-cpp:log_absl_log" ]
  configs += [
    # Must be after no_chromium_code for warning flags to be ordered
    # correctly.
    ":protobuf_warnings",
  ]

  # Build protobuf_lite with full optimizations so Clang can optimize the
  # initializer out. See 0029-make-initializers-optimizable.patch.
  if (!is_debug && is_android) {
    configs -= [ "//build/config/compiler:default_optimization" ]
    configs += [ "//build/config/compiler:optimize_max" ]
  }

  if (is_win) {
    configs -= [ "//build/config/win:lean_and_mean" ]
  }

  public_configs = [ ":protobuf_config" ]

  if (is_android) {
    libs = [ "log" ]  # Used by src/google/protobuf/stubs/common.cc
  }

  cflags = protobuf_lite_cflags

  # Required for component builds. See http://crbug.com/172800.
  if (is_component_build) {
    public_configs += [ ":protobuf_use_dlls" ]
    defines = [ "LIBPROTOBUF_EXPORTS" ]
  }
}

# This is the full, heavy protobuf lib that's needed for c++ .protos that don't
# specify the LITE_RUNTIME option. The protocol compiler itself (protoc) falls
# into that category. Do not use in Chrome code.
static_library("protobuf_full") {
  deps = [ "//third_party/zlib" ]
  public_deps = [ "//third_party/abseil-cpp:absl" ]

  # In component build, protobuf_full can't depend on protobuf_lite because
  # it uses non-PROTOBUF_EXPORT symbols; in non-component build, protobuf_full
  # must have protobuf_lite as a dependency instead of building
  # protobuf_lite_sources to avoid ODR violations in targets that link both.
  # See crbug.com/1338164.
  if (is_component_build) {
    sources = protobuf_lite_sources + protobuf_sources + protobuf_headers
  } else {
    sources = protobuf_sources + protobuf_headers
    deps += [ ":protobuf_lite" ]
  }

  #sources += protobuf_port_sources + protobuf_port_headers
  sources += protobuf_upb_sources + protobuf_upb_headers
  sources += protobuf_compiler_cpp_sources + protobuf_compiler_cpp_headers
  sources += protobuf_compiler_csharp_sources + protobuf_compiler_csharp_headers
  sources += protobuf_compiler_objectivec_sources +
             protobuf_compiler_objectivec_headers
  sources += protobuf_compiler_rust_sources + protobuf_compiler_rust_headers
  sources +=
      protobuf_compiler_java_full_sources + protobuf_compiler_java_full_headers
  sources += protobuf_compiler_java_sources + protobuf_compiler_java_headers
  sources += protobuf_compiler_kotlin_sources + protobuf_compiler_kotlin_headers
  sources += protobuf_compiler_sources + protobuf_compiler_headers
  sources += protobuf_compiler_php_sources + protobuf_compiler_php_headers

  if (is_android) {
    libs = [ "log" ]  # Used by src/google/protobuf/stubs/common.cc
  }

  configs += [
    # Must be after no_chromium_code for warning flags to be ordered
    # correctly.
    ":protobuf_warnings",
  ]

  # Remove coverage and Sanitizers other than ASan for a performance boost when
  # fuzzing. ASan can't be removed here because of a bug preventing unsanitized
  # code from using libc++, which protobuf_full uses.

  public_configs = [ ":protobuf_config" ]

  cflags = protobuf_lite_cflags

  defines = [ "HAVE_ZLIB" ]
}

# Only compile the compiler for the host architecture.
if (current_toolchain == host_toolchain) {
  # protoc compiler is separated into protoc library and executable targets to
  # support protoc plugins that need to link libprotoc, but not the main()
  # itself. See src/google/protobuf/compiler/plugin.h
  source_set("protoc_java") {
    sources = protoc_java_sources + protoc_java_headers
    configs += [
      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
      ":protoc_warnings",
    ]

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
  }
  source_set("protoc_python") {
    sources = protoc_python_sources + protoc_python_headers
    configs += [
      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
      ":protoc_warnings",
    ]

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
  }
  static_library("protoc_lib") {
    sources = protoc_sources + protoc_headers

    configs += [
      # Must be after no_chromium_code for warning flags to be ordered
      # correctly.
      ":protobuf_warnings",
      ":protoc_warnings",
    ]
    if (is_win) {
      # This is defined internally, don't warn on duplicate.
      configs -= [ "//build/config/win:lean_and_mean" ]
    }

    public_configs = [ ":protobuf_config" ]

    cflags = protobuf_lite_cflags

    public_deps = [ ":protobuf_full" ]
    deps = [
      ":protoc_java",
      ":protoc_python",
    ]
  }

  executable("protoc") {
    sources = [ "src/src/google/protobuf/compiler/main.cc" ]

    cflags = protobuf_lite_cflags

    deps = [
      ":protoc_lib",
      "//third_party/abseil-cpp:absl",
      "//third_party/abseil-cpp:base_config",

      # Default manifest on Windows (a no-op elsewhere).
    ]
  }
}

google_python_dir = "$root_out_dir/pyproto/google"

copy("copy_google_protobuf") {
  # TODO(ncarter): protoc's python generator treats descriptor.proto
  # specially, but only when the input path is exactly
  # "google/protobuf/descriptor.proto".  I'm not sure how to execute a rule
  # from a different directory.  For now, use a manually-generated copy of
  # descriptor_pb2.py.
  sources = pyproto_sources + [ "python/google/protobuf/descriptor_pb2.py" ]
  outputs = [ "$google_python_dir/protobuf/{{source_file_part}}" ]
}

copy("copy_google_protobuf_internal") {
  sources = pyproto_internal_sources
  outputs = [ "$google_python_dir/protobuf/internal/{{source_file_part}}" ]
}

# Build time dependency for action rules.
group("py_proto") {
  public_deps = [
    ":copy_google_protobuf",
    ":copy_google_protobuf_internal",
  ]
}

# Runtime dependency if the target needs the python scripts.
group("py_proto_runtime") {
  deps = [ ":py_proto" ]

  # Targets that depend on this should depend on the copied data files.
  data = get_target_outputs(":copy_google_protobuf")
  data += get_target_outputs(":copy_google_protobuf_internal")
}

# Copyright 2014 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("src/gen/sources.gni")

# Config for us and everybody else depending on BoringSSL.
config("external_config") {
  include_dirs = [ "src/include" ]
  if (is_component_build) {
    defines = [ "BORINGSSL_SHARED_LIBRARY" ]
  }
}

# The config used by the :boringssl component itself, and the fuzzer copies.
config("component_config") {
  visibility = [ ":*" ]
  configs = [ ":internal_config" ]
  defines = [ "BORINGSSL_IMPLEMENTATION" ]
}

# This config is used by anything that consumes internal headers. Tests consume
# this rather than :component_config.
config("internal_config") {
  visibility = [ ":*" ]
  defines = [ "OPENSSL_SMALL" ]
}

config("no_asm_config") {
  visibility = [ ":*" ]
  defines = [ "OPENSSL_NO_ASM" ]
}

# TODO(crbug.com/42290535): Move Chromium's use of libpki to the public API and
# unexport pki_internal_headers.
all_sources = bcm_internal_headers + bcm_sources + crypto_internal_headers +
              crypto_sources + ssl_internal_headers + ssl_sources + pki_sources
all_headers = crypto_headers + ssl_headers + pki_headers + pki_internal_headers

is_msan = false

if (is_msan) {
  # MSan instrumentation is incompatible with assembly optimizations.
  # BoringSSL's GAS-compatible assembly knows how to detect MSan, but the NASM
  # assembly does not, so we check for MSan explicitly.
  source_set("boringssl_asm") {
    visibility = [ ":*" ]
    public_configs = [ ":no_asm_config" ]
  }
  source_set("test_support_asm") {
    visibility = [ ":*" ]
    testonly = true
  }
} else if (is_win && (current_cpu == "x86" || current_cpu == "x64")) {
  # Windows' x86 and x86_64 assembly is built with NASM.
  import("//third_party/nasm/nasm_assemble.gni")
  nasm_assemble("boringssl_asm") {
    visibility = [ ":*" ]
    sources = rebase_path(bcm_sources_nasm + crypto_sources_nasm, ".", "src")
  }
  nasm_assemble("test_support_asm") {
    visibility = [ ":*" ]
    sources = rebase_path(test_support_sources_nasm, ".", "src")
  }
} else {
  # All other targets use GAS-compatible assembler. BoringSSL's assembly files
  # are all wrapped in processor checks for the corresponding target, so there
  # is no need to add target conditions in the build.
  source_set("boringssl_asm") {
    visibility = [ ":*" ]
    sources = rebase_path(bcm_sources_asm + crypto_sources_asm, ".", "src")
    include_dirs = [ "src/include" ]
  }
  source_set("test_support_asm") {
    visibility = [ ":*" ]
    sources = rebase_path(test_support_sources_asm, ".", "src")
    include_dirs = [ "src/include" ]
  }
}

static_library("boringssl") {
  sources = rebase_path(all_sources, ".", "src")
  public = rebase_path(all_headers, ".", "src")
  friend = [ ":*" ]
  deps = [ "//third_party/boringssl/src/third_party/fiat:fiat_license" ]

  # Mark boringssl_asm as a public dependency so the OPENSSL_NO_ASM
  # config is forwarded to callers. In particular, boringssl_crypto_tests
  # requires it.
  public_deps = [ ":boringssl_asm" ]

  public_configs = [ ":external_config" ]
  configs += [ ":component_config" ]
}

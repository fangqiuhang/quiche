# Copyright 2013 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
  # Expose zlib's symbols, used by Node.js to provide zlib APIs for its native
  # modules.
  zlib_symbols_visible = false
}

config("zlib_config") {
  include_dirs = [
    ".",
    "src",
  ]

  if (zlib_symbols_visible) {
    defines = [ "ZLIB_DLL" ]
  }
  cflags_c = [ "-Wno-implicit-function-declaration" ]
}

config("zlib_internal_config") {
  defines = [ "ZLIB_IMPLEMENTATION" ]

  if (is_debug) {
    # Enable zlib's asserts in debug and fuzzer builds.
    defines += [ "ZLIB_DEBUG" ]
  }

  if (is_win && !is_clang) {
    # V8 supports building with msvc, these silence some warnings that
    # causes compilation to fail (https://crbug.com/1255096).
    cflags = [
      "/wd4244",
      "/wd4100",
      "/wd4702",
      "/wd4127",
    ]
  }
}

source_set("zlib_common_headers") {
  visibility = [ ":*" ]

  sources = [
    "src/deflate.h",
    "src/inffast.h",
    "src/inffixed.h",
    "src/inflate.h",
    "src/inftrees.h",
    "src/zconf.h",
    "src/zlib.h",
    "src/zutil.h",
  ]
}

use_arm_neon_optimizations = false
if ((current_cpu == "arm" || current_cpu == "arm64") &&
    !(is_win && !is_clang)) {
  # TODO(richard.townsend@arm.com): Optimizations temporarily disabled for
  # Windows on Arm MSVC builds, see http://crbug.com/v8/10012.
  if (arm_use_neon) {
    use_arm_neon_optimizations = true
  }
}

use_x86_x64_optimizations =
    (current_cpu == "x86" || current_cpu == "x64") && !is_ios

config("zlib_inflate_chunk_simd_config") {
  if (use_x86_x64_optimizations) {
    defines = [ "INFLATE_CHUNK_SIMD_SSE2" ]

    if (current_cpu == "x64") {
      defines += [ "INFLATE_CHUNK_READ_64LE" ]
    }
  }

  if (use_arm_neon_optimizations) {
    defines = [ "INFLATE_CHUNK_SIMD_NEON" ]

    if (current_cpu == "arm64") {
      defines += [ "INFLATE_CHUNK_READ_64LE" ]
    }
  }
}

source_set("zlib_inflate_chunk_simd") {
  visibility = [ ":*" ]

  if (use_x86_x64_optimizations || use_arm_neon_optimizations) {
    include_dirs = [
      ".",
      "src",
    ]

    sources = [
      "contrib/optimizations/chunkcopy.h",
      "contrib/optimizations/inffast_chunk.c",
      "contrib/optimizations/inffast_chunk.h",
      "contrib/optimizations/inflate.c",
    ]
  }

  configs += [ ":zlib_internal_config" ]

  # Needed for MSVC, which is still supported by V8 and PDFium. zlib uses K&R C
  # style function declarations, which triggers warning C4131.
  configs += [ ":zlib_warnings" ]

  public_configs = [ ":zlib_inflate_chunk_simd_config" ]

  public_deps = [ ":zlib_common_headers" ]
}

config("zlib_slide_hash_simd_config") {
  if (use_x86_x64_optimizations) {
    defines = [ "DEFLATE_SLIDE_HASH_SSE2" ]
  }

  if (use_arm_neon_optimizations) {
    defines = [ "DEFLATE_SLIDE_HASH_NEON" ]
  }
}

source_set("zlib_slide_hash_simd") {
  visibility = [ ":*" ]

  if (use_x86_x64_optimizations) {
    sources = [ "slide_hash_simd.h" ]
  }

  if (use_arm_neon_optimizations) {
    sources = [ "slide_hash_simd.h" ]
  }

  configs += [ ":zlib_internal_config" ]

  public_configs = [ ":zlib_slide_hash_simd_config" ]

  public_deps = [ ":zlib_common_headers" ]
}

config("zlib_warnings") {
  if (is_clang) {
    cflags = [
      "-Wno-incompatible-pointer-types",
      "-Wunused-variable",
    ]
  }
}

static_library("zlib") {
  if (!is_win) {
    # Don't stomp on "libzlib" on other platforms.
    output_name = "chrome_zlib"
  }

  sources = [
    "contrib/optimizations/insert_string.h",
    "cpu_features.c",
    "cpu_features.h",
    "src/adler32.c",
    "src/compress.c",
    "src/crc32.c",
    "src/crc32.h",
    "src/deflate.c",
    "src/deflate.h",
    "src/gzclose.c",
    "src/gzguts.h",
    "src/gzlib.c",
    "src/gzread.c",
    "src/gzwrite.c",
    "src/infback.c",
    "src/inffast.c",
    "src/inffast.h",
    "src/inffixed.h",
    "src/inflate.h",
    "src/inftrees.c",
    "src/inftrees.h",
    "src/trees.c",
    "src/trees.h",
    "src/uncompr.c",
    "src/zconf.h",
    "src/zlib.h",
    "src/zutil.c",
    "src/zutil.h",
  ]

  deps = []

  if (!use_x86_x64_optimizations && !use_arm_neon_optimizations) {
    # Apparently android_cronet bot builds with NEON disabled and
    # we also should disable optimizations for iOS@x86 (a.k.a. simulator).
    #defines += [ "CPU_NO_SIMD" ]
  }

  if (use_x86_x64_optimizations || use_arm_neon_optimizations) {
    deps += [
      ":zlib_inflate_chunk_simd",
      ":zlib_slide_hash_simd",
    ]
  } else {
    sources += [ "src/inflate.c" ]
  }

  if (is_android) {
    #import("//build/config/android/config.gni")
  }

  public_configs = [ ":zlib_config" ]

  configs += [
    ":zlib_internal_config",

    # Must be after no_chromium_code for warning flags to be ordered correctly.
    ":zlib_warnings",
  ]

  #allow_circular_includes_from = deps
}

config("minizip_warnings") {
  visibility = [ ":*" ]

  if (is_clang) {
    cflags = [
      # zlib uses `if ((a == b))` for some reason.
      "-Wno-parentheses-equality",
    ]
  }
}

static_library("minizip") {
  include_dirs = [ "//third_party/zlib/src" ]

  sources = [
    "src/contrib/minizip/ioapi.c",
    "src/contrib/minizip/ioapi.h",
    "src/contrib/minizip/iowin32.c",
    "src/contrib/minizip/iowin32.h",
    "src/contrib/minizip/unzip.c",
    "src/contrib/minizip/unzip.h",
    "src/contrib/minizip/zip.c",
    "src/contrib/minizip/zip.h",
  ]

  if (!is_win) {
    sources -= [
      "src/contrib/minizip/iowin32.c",
      "src/contrib/minizip/iowin32.h",
    ]
  }

  if (is_apple || is_android) {
    # Mac, Android and the BSDs don't have fopen64, ftello64, or fseeko64. We
    # use fopen, ftell, and fseek instead on these systems.
    defines = [ "USE_FILE32API" ]
  }

  deps = [ ":zlib" ]

  public_configs = [ ":zlib_config" ]

  configs += [
    # Must be after no_chromium_code for warning flags to be ordered correctly.
    ":minizip_warnings",
  ]
}

executable("zlib_bench") {
  include_dirs = [ "." ]

  sources = [ "contrib/bench/zlib_bench.cc" ]

  deps = [ ":zlib" ]
}

executable("minigzip") {
  include_dirs = [ "." ]

  sources = [ "test/minigzip.c" ]

  deps = [ ":zlib" ]
}

executable("zpipe") {
  include_dirs = [ "." ]

  sources = [ "examples/zpipe.c" ]

  deps = [ ":zlib" ]
}

if (!is_win || target_os != "winuwp") {
  executable("minizip_bin") {
    include_dirs = [ "." ]

    sources = [ "src/contrib/minizip/minizip.c" ]

    if (is_clang) {
      cflags = [ "-Wno-incompatible-pointer-types-discards-qualifiers" ]
    }

    deps = [ ":minizip" ]
  }

  executable("miniunz_bin") {
    include_dirs = [ "." ]

    sources = [ "src/contrib/minizip/miniunz.c" ]

    if (is_clang) {
      cflags = [ "-Wno-incompatible-pointer-types-discards-qualifiers" ]
    }

    deps = [ ":minizip" ]
  }
}
